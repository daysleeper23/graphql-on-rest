type Query {
  "Get all tasks by company and workspace"
  tasksByCompanyAndWorkspace(companyId: ID!, workspaceId: ID!): [Task!]!
}

type Subscription {
  taskCreated(companyId: ID!, workspaceId: ID!): TaskCreated
  taskUpdated(companyId: ID!, workspaceId: ID!): TaskUpdated
}

type Mutation {
  createTask(
    companyId: ID!
    projectId: ID!
    task: TaskCreate!
  ): Task

  updateTask(
    companyId: ID!
    projectId: ID!
    taskId: ID!
    task: TaskUpdate!
  ): Task
}

"A task is a unit of work that needs to be done"
type Task {
  id: ID!

  title: String!
  
  description: String
  
  status: String!
  
  assigneeId: ID!
  
  priority: Int!
  
  projectId: ID!
  
  workspaceId: ID!
  
  startedAt: String
  
  endedAt: String
}

input TaskCreate {
  title: String!
  
  description: String
  
  status: String!
  
  assigneeId: ID!
  
  priority: Int!
  
  projectId: ID!
  
  workspaceId: ID!
  
  startedAt: String
  
  endedAt: String
}

input TaskUpdate {
  title: String
  
  description: String
  
  status: String
  
  assigneeId: ID
  
  priority: Int
  
  projectId: ID
  
  startedAt: String
  
  endedAt: String
}

type SingleTaskResponse {
  "The status of the response"
  status: String!
  
  "The HTTP status code of the response"
  code: Int!
  
  "The task returned by the query"
  data: Task
  
  "The errors returned by the query"
  errors: [String!]
}

type GetTasksResponse {
  "The status of the response"
  status: String!
  
  "The HTTP status code of the response"
  code: Int!
  
  "The tasks returned by the query"
  data: [Task!]!
  
  "The errors returned by the query"
  errors: [String!]
}

type TaskCreated {
  companyId: ID!
  workspaceId: ID!
  task: Task!
}

type CreatedTaskPayload {
  taskCreated: TaskCreated
}

type TaskUpdated {
  companyId: ID!
  workspaceId: ID!
  task: Task!
}

type UpdatedTaskPayload {
  taskUpdated: TaskUpdated
}